
Finalproje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000244c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080025dc  080025dc  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025dc  080025dc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080025e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000328  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000890c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000174e  00000000  00000000  00028944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000630  00000000  00000000  0002a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020419  00000000  00000000  0002ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008622  00000000  00000000  0004b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7e32  00000000  00000000  000537db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011b60d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c40  00000000  00000000  0011b660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025bc 	.word	0x080025bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080025bc 	.word	0x080025bc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <ADC1_Init>:
#include "stm32f4xx_hal_rcc.h"

uint16_t adcValue;

void ADC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <ADC1_Init+0x6c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <ADC1_Init+0x6c>)
 80007e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
  GPIOA->MODER |= GPIO_MODER_MODER0;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <ADC1_Init+0x70>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <ADC1_Init+0x70>)
 80007ec:	f043 0303 	orr.w	r3, r3, #3
 80007f0:	6013      	str	r3, [r2, #0]
  ADC1->CR1 &= (ADC_CR1_SCAN);
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <ADC1_Init+0x74>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <ADC1_Init+0x74>)
 80007f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007fc:	6053      	str	r3, [r2, #4]
  ADC1->CR2 |= ~ADC_CR2_CONT;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <ADC1_Init+0x74>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <ADC1_Init+0x74>)
 8000804:	f063 0302 	orn	r3, r3, #2
 8000808:	6093      	str	r3, [r2, #8]

  uint32_t clockFreq = HAL_RCC_GetPCLK2Freq();
 800080a:	f001 fa8d 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t sampleTime = 2 * (clockFreq / 10);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <ADC1_Init+0x78>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	603b      	str	r3, [r7, #0]
  ADC1->SMPR2 |= sampleTime << ADC_SMPR2_SMP0_Pos;
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <ADC1_Init+0x74>)
 8000820:	691a      	ldr	r2, [r3, #16]
 8000822:	4909      	ldr	r1, [pc, #36]	; (8000848 <ADC1_Init+0x74>)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4313      	orrs	r3, r2
 8000828:	610b      	str	r3, [r1, #16]
  ADC1->CR2 |= ADC_CR2_ADON;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <ADC1_Init+0x74>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	4a06      	ldr	r2, [pc, #24]	; (8000848 <ADC1_Init+0x74>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6093      	str	r3, [r2, #8]
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40012000 	.word	0x40012000
 800084c:	cccccccd 	.word	0xcccccccd

08000850 <TIM4_PWM_Init>:

void TIM4_PWM_Init(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <TIM4_PWM_Init+0xd8>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <TIM4_PWM_Init+0xd8>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
  GPIOB->MODER &= ~(GPIO_MODER_MODER7);
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <TIM4_PWM_Init+0xdc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a31      	ldr	r2, [pc, #196]	; (800092c <TIM4_PWM_Init+0xdc>)
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODER7_1;
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <TIM4_PWM_Init+0xdc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <TIM4_PWM_Init+0xdc>)
 8000874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000878:	6013      	str	r3, [r2, #0]
  GPIOB->AFR[0] |= (2 << (7 * 4));
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <TIM4_PWM_Init+0xdc>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a2b      	ldr	r2, [pc, #172]	; (800092c <TIM4_PWM_Init+0xdc>)
 8000880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000884:	6213      	str	r3, [r2, #32]

  uint32_t clockFreq = SystemCoreClock;
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <TIM4_PWM_Init+0xe0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]
  uint32_t desiredFreq = 1000;
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	60bb      	str	r3, [r7, #8]
  uint32_t psc = clockFreq / (desiredFreq * 10000);
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	f242 7210 	movw	r2, #10000	; 0x2710
 8000898:	fb02 f303 	mul.w	r3, r2, r3
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	607b      	str	r3, [r7, #4]
  uint32_t arr = clockFreq / (desiredFreq * psc);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	fb02 f303 	mul.w	r3, r2, r3
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	603b      	str	r3, [r7, #0]

  TIM4->PSC = 65500;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008b6:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->ARR = 10*arr - 1;
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008c8:	3b01      	subs	r3, #1
 80008ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM4->CCMR1 |= (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2);
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a18      	ldr	r2, [pc, #96]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80008d6:	6193      	str	r3, [r2, #24]
  TIM4->CCER |= TIM_CCER_CC1E;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008da:	6a1b      	ldr	r3, [r3, #32]
 80008dc:	4a15      	ldr	r2, [pc, #84]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6213      	str	r3, [r2, #32]
  TIM4->CCR1 = (uint32_t)(arr * 0.95);
 80008e4:	6838      	ldr	r0, [r7, #0]
 80008e6:	f7ff fedb 	bl	80006a0 <__aeabi_ui2d>
 80008ea:	a30d      	add	r3, pc, #52	; (adr r3, 8000920 <TIM4_PWM_Init+0xd0>)
 80008ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f0:	f7ff fc6a 	bl	80001c8 <__aeabi_dmul>
 80008f4:	4602      	mov	r2, r0
 80008f6:	460b      	mov	r3, r1
 80008f8:	4c0e      	ldr	r4, [pc, #56]	; (8000934 <TIM4_PWM_Init+0xe4>)
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	f7ff ff49 	bl	8000794 <__aeabi_d2uiz>
 8000902:	4603      	mov	r3, r0
 8000904:	6363      	str	r3, [r4, #52]	; 0x34
  TIM4->CR1 |= TIM_CR1_CEN;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <TIM4_PWM_Init+0xe4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <TIM4_PWM_Init+0xe4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6013      	str	r3, [r2, #0]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	f3af 8000 	nop.w
 8000920:	66666666 	.word	0x66666666
 8000924:	3fee6666 	.word	0x3fee6666
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	20000000 	.word	0x20000000
 8000934:	40000800 	.word	0x40000800

08000938 <Read_ADC_Value>:

void Read_ADC_Value(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  ADC1->CR2 |= ADC_CR2_SWSTART;
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <Read_ADC_Value+0x34>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <Read_ADC_Value+0x34>)
 8000942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000946:	6093      	str	r3, [r2, #8]
  while (!(ADC1->SR & ADC_SR_EOC));
 8000948:	bf00      	nop
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <Read_ADC_Value+0x34>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f9      	beq.n	800094a <Read_ADC_Value+0x12>
  adcValue = ADC1->DR;
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <Read_ADC_Value+0x34>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <Read_ADC_Value+0x38>)
 800095e:	801a      	strh	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40012000 	.word	0x40012000
 8000970:	20000024 	.word	0x20000024

08000974 <main>:

int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <main+0x38>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <main+0x38>)
 800097e:	f043 0303 	orr.w	r3, r3, #3
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <main+0x38>)
 8000986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <main+0x38>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <main+0x38>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <main+0x38>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6413      	str	r3, [r2, #64]	; 0x40

  ADC1_Init();
 800099c:	f7ff ff1a 	bl	80007d4 <ADC1_Init>
  TIM4_PWM_Init();
 80009a0:	f7ff ff56 	bl	8000850 <TIM4_PWM_Init>

  while (1)
  {
    Read_ADC_Value();
 80009a4:	f7ff ffc8 	bl	8000938 <Read_ADC_Value>
 80009a8:	e7fc      	b.n	80009a4 <main+0x30>
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f848 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <OTG_FS_IRQHandler+0x10>)
 8000a0a:	f000 f855 	bl	8000ab8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000002c 	.word	0x2000002c

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd7 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f001 fd83 	bl	8002574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff ff81 	bl	8000974 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000a80:	080025e4 	.word	0x080025e4
  ldr r2, =_sbss
 8000a84:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000a88:	20000330 	.word	0x20000330

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000028 	.word	0x20000028

08000ab8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fa2f 	bl	8001f32 <USB_GetMode>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	f040 80f6 	bne.w	8000cc8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fa13 	bl	8001f0c <USB_ReadInterrupts>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 80ec 	beq.w	8000cc6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fa0a 	bl	8001f0c <USB_ReadInterrupts>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b02:	d104      	bne.n	8000b0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f9fa 	bl	8001f0c <USB_ReadInterrupts>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b22:	d104      	bne.n	8000b2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f9ea 	bl	8001f0c <USB_ReadInterrupts>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b42:	d104      	bne.n	8000b4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f9da 	bl	8001f0c <USB_ReadInterrupts>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d103      	bne.n	8000b6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2202      	movs	r2, #2
 8000b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f9cc 	bl	8001f0c <USB_ReadInterrupts>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b7e:	d11c      	bne.n	8000bba <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	6938      	ldr	r0, [r7, #16]
 8000b9e:	f001 f8f9 	bl	8001d94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000ba2:	6938      	ldr	r0, [r7, #16]
 8000ba4:	f001 f92a 	bl	8001dfc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 f9cd 	bl	8001f4e <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f001 fc5e 	bl	8002476 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f9a4 	bl	8001f0c <USB_ReadInterrupts>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bce:	d102      	bne.n	8000bd6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f001 f829 	bl	8001c28 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f996 	bl	8001f0c <USB_ReadInterrupts>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d106      	bne.n	8000bf8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f001 fc27 	bl	800243e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 f985 	bl	8001f0c <USB_ReadInterrupts>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b10      	cmp	r3, #16
 8000c0a:	d101      	bne.n	8000c10 <HAL_HCD_IRQHandler+0x158>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <HAL_HCD_IRQHandler+0x15a>
 8000c10:	2300      	movs	r3, #0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d012      	beq.n	8000c3c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0210 	bic.w	r2, r2, #16
 8000c24:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 ff2c 	bl	8001a84 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f042 0210 	orr.w	r2, r2, #16
 8000c3a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 f963 	bl	8001f0c <USB_ReadInterrupts>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c50:	d13a      	bne.n	8000cc8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 f9b3 	bl	8001fc2 <USB_HC_ReadInterrupt>
 8000c5c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e025      	b.n	8000cb0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d018      	beq.n	8000caa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	015a      	lsls	r2, r3, #5
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c8e:	d106      	bne.n	8000c9e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f836 	bl	8000d08 <HCD_HC_IN_IRQHandler>
 8000c9c:	e005      	b.n	8000caa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 fb84 	bl	80013b2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3d4      	bcc.n	8000c64 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	e000      	b.n	8000cc8 <HAL_HCD_IRQHandler+0x210>
      return;
 8000cc6:	bf00      	nop
    }
  }
}
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d101      	bne.n	8000ce4 <HAL_HCD_Stop+0x16>
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e00d      	b.n	8000d00 <HAL_HCD_Stop+0x32>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fa73 	bl	80021dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	015a      	lsls	r2, r3, #5
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4413      	add	r3, r2
 8000d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d11a      	bne.n	8000d6e <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	015a      	lsls	r2, r3, #5
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4413      	add	r3, r2
 8000d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d44:	461a      	mov	r2, r3
 8000d46:	2304      	movs	r3, #4
 8000d48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	212c      	movs	r1, #44	; 0x2c
 8000d50:	fb01 f303 	mul.w	r3, r1, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	3361      	adds	r3, #97	; 0x61
 8000d58:	2206      	movs	r2, #6
 8000d5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f93c 	bl	8001fe4 <USB_HC_Halt>
 8000d6c:	e0af      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	015a      	lsls	r2, r3, #5
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4413      	add	r3, r2
 8000d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d11b      	bne.n	8000dbe <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	015a      	lsls	r2, r3, #5
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d92:	461a      	mov	r2, r3
 8000d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	212c      	movs	r1, #44	; 0x2c
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	3361      	adds	r3, #97	; 0x61
 8000da8:	2207      	movs	r2, #7
 8000daa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f914 	bl	8001fe4 <USB_HC_Halt>
 8000dbc:	e087      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	015a      	lsls	r2, r3, #5
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d109      	bne.n	8000de8 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	015a      	lsls	r2, r3, #5
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000de0:	461a      	mov	r2, r3
 8000de2:	2320      	movs	r3, #32
 8000de4:	6093      	str	r3, [r2, #8]
 8000de6:	e072      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	015a      	lsls	r2, r3, #5
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4413      	add	r3, r2
 8000df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d11a      	bne.n	8000e34 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	015a      	lsls	r2, r3, #5
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4413      	add	r3, r2
 8000e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	212c      	movs	r1, #44	; 0x2c
 8000e16:	fb01 f303 	mul.w	r3, r1, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3361      	adds	r3, #97	; 0x61
 8000e1e:	2205      	movs	r2, #5
 8000e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 f8d9 	bl	8001fe4 <USB_HC_Halt>
 8000e32:	e04c      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4a:	d11b      	bne.n	8000e84 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	015a      	lsls	r2, r3, #5
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4413      	add	r3, r2
 8000e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	212c      	movs	r1, #44	; 0x2c
 8000e66:	fb01 f303 	mul.w	r3, r1, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3361      	adds	r3, #97	; 0x61
 8000e6e:	2208      	movs	r2, #8
 8000e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 f8b1 	bl	8001fe4 <USB_HC_Halt>
 8000e82:	e024      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	015a      	lsls	r2, r3, #5
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	2b80      	cmp	r3, #128	; 0x80
 8000e98:	d119      	bne.n	8000ece <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	015a      	lsls	r2, r3, #5
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	212c      	movs	r1, #44	; 0x2c
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3361      	adds	r3, #97	; 0x61
 8000eba:	2206      	movs	r2, #6
 8000ebc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 f88b 	bl	8001fe4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	015a      	lsls	r2, r3, #5
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee4:	d112      	bne.n	8000f0c <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 f877 	bl	8001fe4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	015a      	lsls	r2, r3, #5
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f02:	461a      	mov	r2, r3
 8000f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f08:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000f0a:	e24e      	b.n	80013aa <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	015a      	lsls	r2, r3, #5
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4413      	add	r3, r2
 8000f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f040 80df 	bne.w	80010e2 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d019      	beq.n	8000f60 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	212c      	movs	r1, #44	; 0x2c
 8000f32:	fb01 f303 	mul.w	r3, r1, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	3348      	adds	r3, #72	; 0x48
 8000f3a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	0159      	lsls	r1, r3, #5
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f4e:	1ad2      	subs	r2, r2, r3
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	202c      	movs	r0, #44	; 0x2c
 8000f56:	fb00 f303 	mul.w	r3, r0, r3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3350      	adds	r3, #80	; 0x50
 8000f5e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	212c      	movs	r1, #44	; 0x2c
 8000f66:	fb01 f303 	mul.w	r3, r1, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3361      	adds	r3, #97	; 0x61
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	212c      	movs	r1, #44	; 0x2c
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	335c      	adds	r3, #92	; 0x5c
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f90:	461a      	mov	r2, r3
 8000f92:	2301      	movs	r3, #1
 8000f94:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	212c      	movs	r1, #44	; 0x2c
 8000f9c:	fb01 f303 	mul.w	r3, r1, r3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	333f      	adds	r3, #63	; 0x3f
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d009      	beq.n	8000fbe <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	212c      	movs	r1, #44	; 0x2c
 8000fb0:	fb01 f303 	mul.w	r3, r1, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	333f      	adds	r3, #63	; 0x3f
 8000fb8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d111      	bne.n	8000fe2 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f80b 	bl	8001fe4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	015a      	lsls	r2, r3, #5
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2310      	movs	r3, #16
 8000fde:	6093      	str	r3, [r2, #8]
 8000fe0:	e03a      	b.n	8001058 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	212c      	movs	r1, #44	; 0x2c
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	333f      	adds	r3, #63	; 0x3f
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d009      	beq.n	800100a <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	212c      	movs	r1, #44	; 0x2c
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	333f      	adds	r3, #63	; 0x3f
 8001004:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001006:	2b01      	cmp	r3, #1
 8001008:	d126      	bne.n	8001058 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	015a      	lsls	r2, r3, #5
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4413      	add	r3, r2
 8001012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	0151      	lsls	r1, r2, #5
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	440a      	add	r2, r1
 8001020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001028:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	212c      	movs	r1, #44	; 0x2c
 8001030:	fb01 f303 	mul.w	r3, r1, r3
 8001034:	4413      	add	r3, r2
 8001036:	3360      	adds	r3, #96	; 0x60
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	b2d9      	uxtb	r1, r3
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	202c      	movs	r0, #44	; 0x2c
 8001046:	fb00 f303 	mul.w	r3, r0, r3
 800104a:	4413      	add	r3, r2
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f001 fa1d 	bl	8002492 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d12b      	bne.n	80010b8 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	212c      	movs	r1, #44	; 0x2c
 8001066:	fb01 f303 	mul.w	r3, r1, r3
 800106a:	4413      	add	r3, r2
 800106c:	3348      	adds	r3, #72	; 0x48
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	202c      	movs	r0, #44	; 0x2c
 8001076:	fb00 f202 	mul.w	r2, r0, r2
 800107a:	440a      	add	r2, r1
 800107c:	3240      	adds	r2, #64	; 0x40
 800107e:	8812      	ldrh	r2, [r2, #0]
 8001080:	fbb3 f3f2 	udiv	r3, r3, r2
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 818e 	beq.w	80013aa <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	212c      	movs	r1, #44	; 0x2c
 8001094:	fb01 f303 	mul.w	r3, r1, r3
 8001098:	4413      	add	r3, r2
 800109a:	3354      	adds	r3, #84	; 0x54
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2d8      	uxtb	r0, r3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	212c      	movs	r1, #44	; 0x2c
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	3354      	adds	r3, #84	; 0x54
 80010b2:	4602      	mov	r2, r0
 80010b4:	701a      	strb	r2, [r3, #0]
}
 80010b6:	e178      	b.n	80013aa <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	212c      	movs	r1, #44	; 0x2c
 80010be:	fb01 f303 	mul.w	r3, r1, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	3354      	adds	r3, #84	; 0x54
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f083 0301 	eor.w	r3, r3, #1
 80010cc:	b2d8      	uxtb	r0, r3
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	212c      	movs	r1, #44	; 0x2c
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	4413      	add	r3, r2
 80010da:	3354      	adds	r3, #84	; 0x54
 80010dc:	4602      	mov	r2, r0
 80010de:	701a      	strb	r2, [r3, #0]
}
 80010e0:	e163      	b.n	80013aa <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	015a      	lsls	r2, r3, #5
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4413      	add	r3, r2
 80010ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	f040 80f6 	bne.w	80012e6 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	212c      	movs	r1, #44	; 0x2c
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	4413      	add	r3, r2
 8001106:	3361      	adds	r3, #97	; 0x61
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d109      	bne.n	8001122 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	212c      	movs	r1, #44	; 0x2c
 8001114:	fb01 f303 	mul.w	r3, r1, r3
 8001118:	4413      	add	r3, r2
 800111a:	3360      	adds	r3, #96	; 0x60
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e0c9      	b.n	80012b6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	212c      	movs	r1, #44	; 0x2c
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	4413      	add	r3, r2
 800112e:	3361      	adds	r3, #97	; 0x61
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d109      	bne.n	800114a <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	212c      	movs	r1, #44	; 0x2c
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	4413      	add	r3, r2
 8001142:	3360      	adds	r3, #96	; 0x60
 8001144:	2205      	movs	r2, #5
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e0b5      	b.n	80012b6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	212c      	movs	r1, #44	; 0x2c
 8001150:	fb01 f303 	mul.w	r3, r1, r3
 8001154:	4413      	add	r3, r2
 8001156:	3361      	adds	r3, #97	; 0x61
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d009      	beq.n	8001172 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	212c      	movs	r1, #44	; 0x2c
 8001164:	fb01 f303 	mul.w	r3, r1, r3
 8001168:	4413      	add	r3, r2
 800116a:	3361      	adds	r3, #97	; 0x61
 800116c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800116e:	2b08      	cmp	r3, #8
 8001170:	d150      	bne.n	8001214 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	212c      	movs	r1, #44	; 0x2c
 8001178:	fb01 f303 	mul.w	r3, r1, r3
 800117c:	4413      	add	r3, r2
 800117e:	335c      	adds	r3, #92	; 0x5c
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	fb00 f303 	mul.w	r3, r0, r3
 800118e:	440b      	add	r3, r1
 8001190:	335c      	adds	r3, #92	; 0x5c
 8001192:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	212c      	movs	r1, #44	; 0x2c
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	335c      	adds	r3, #92	; 0x5c
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d912      	bls.n	80011ce <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	212c      	movs	r1, #44	; 0x2c
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	335c      	adds	r3, #92	; 0x5c
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	3360      	adds	r3, #96	; 0x60
 80011c8:	2204      	movs	r2, #4
 80011ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80011cc:	e073      	b.n	80012b6 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	212c      	movs	r1, #44	; 0x2c
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	4413      	add	r3, r2
 80011da:	3360      	adds	r3, #96	; 0x60
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80011f6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	015a      	lsls	r2, r3, #5
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4413      	add	r3, r2
 8001208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001212:	e050      	b.n	80012b6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	4413      	add	r3, r2
 8001220:	3361      	adds	r3, #97	; 0x61
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d122      	bne.n	800126e <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	212c      	movs	r1, #44	; 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3360      	adds	r3, #96	; 0x60
 8001236:	2202      	movs	r2, #2
 8001238:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	015a      	lsls	r2, r3, #5
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4413      	add	r3, r2
 8001242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001250:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001258:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	015a      	lsls	r2, r3, #5
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4413      	add	r3, r2
 8001262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e023      	b.n	80012b6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	212c      	movs	r1, #44	; 0x2c
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	4413      	add	r3, r2
 800127a:	3361      	adds	r3, #97	; 0x61
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b07      	cmp	r3, #7
 8001280:	d119      	bne.n	80012b6 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	212c      	movs	r1, #44	; 0x2c
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	335c      	adds	r3, #92	; 0x5c
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	202c      	movs	r0, #44	; 0x2c
 800129a:	fb00 f303 	mul.w	r3, r0, r3
 800129e:	440b      	add	r3, r1
 80012a0:	335c      	adds	r3, #92	; 0x5c
 80012a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	212c      	movs	r1, #44	; 0x2c
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	3360      	adds	r3, #96	; 0x60
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012c2:	461a      	mov	r2, r3
 80012c4:	2302      	movs	r3, #2
 80012c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	202c      	movs	r0, #44	; 0x2c
 80012d2:	fb00 f303 	mul.w	r3, r0, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	3360      	adds	r3, #96	; 0x60
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f001 f8d7 	bl	8002492 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80012e4:	e061      	b.n	80013aa <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d156      	bne.n	80013aa <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	212c      	movs	r1, #44	; 0x2c
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	333f      	adds	r3, #63	; 0x3f
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d111      	bne.n	8001334 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	212c      	movs	r1, #44	; 0x2c
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	335c      	adds	r3, #92	; 0x5c
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fe59 	bl	8001fe4 <USB_HC_Halt>
 8001332:	e031      	b.n	8001398 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	212c      	movs	r1, #44	; 0x2c
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	4413      	add	r3, r2
 8001340:	333f      	adds	r3, #63	; 0x3f
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	212c      	movs	r1, #44	; 0x2c
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	333f      	adds	r3, #63	; 0x3f
 8001356:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001358:	2b02      	cmp	r3, #2
 800135a:	d11d      	bne.n	8001398 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	212c      	movs	r1, #44	; 0x2c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	335c      	adds	r3, #92	; 0x5c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d110      	bne.n	8001398 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	212c      	movs	r1, #44	; 0x2c
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	4413      	add	r3, r2
 8001382:	3361      	adds	r3, #97	; 0x61
 8001384:	2203      	movs	r2, #3
 8001386:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fe26 	bl	8001fe4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013a4:	461a      	mov	r2, r3
 80013a6:	2310      	movs	r3, #16
 80013a8:	6093      	str	r3, [r2, #8]
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b088      	sub	sp, #32
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	015a      	lsls	r2, r3, #5
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d11a      	bne.n	8001418 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	015a      	lsls	r2, r3, #5
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ee:	461a      	mov	r2, r3
 80013f0:	2304      	movs	r3, #4
 80013f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3361      	adds	r3, #97	; 0x61
 8001402:	2206      	movs	r2, #6
 8001404:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fde7 	bl	8001fe4 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001416:	e331      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	4413      	add	r3, r2
 8001420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b20      	cmp	r3, #32
 800142c:	d12e      	bne.n	800148c <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4413      	add	r3, r2
 8001436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143a:	461a      	mov	r2, r3
 800143c:	2320      	movs	r3, #32
 800143e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	212c      	movs	r1, #44	; 0x2c
 8001446:	fb01 f303 	mul.w	r3, r1, r3
 800144a:	4413      	add	r3, r2
 800144c:	333d      	adds	r3, #61	; 0x3d
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	f040 8313 	bne.w	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	212c      	movs	r1, #44	; 0x2c
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	4413      	add	r3, r2
 8001462:	333d      	adds	r3, #61	; 0x3d
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	212c      	movs	r1, #44	; 0x2c
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	4413      	add	r3, r2
 8001474:	3360      	adds	r3, #96	; 0x60
 8001476:	2202      	movs	r2, #2
 8001478:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fdad 	bl	8001fe4 <USB_HC_Halt>
}
 800148a:	e2f7      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a2:	d112      	bne.n	80014ca <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	015a      	lsls	r2, r3, #5
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b0:	461a      	mov	r2, r3
 80014b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fd8e 	bl	8001fe4 <USB_HC_Halt>
}
 80014c8:	e2d8      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d140      	bne.n	8001562 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	212c      	movs	r1, #44	; 0x2c
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	335c      	adds	r3, #92	; 0x5c
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001504:	2b40      	cmp	r3, #64	; 0x40
 8001506:	d111      	bne.n	800152c <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	333d      	adds	r3, #61	; 0x3d
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4413      	add	r3, r2
 8001522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001526:	461a      	mov	r2, r3
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	4413      	add	r3, r2
 8001534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001538:	461a      	mov	r2, r3
 800153a:	2301      	movs	r3, #1
 800153c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	212c      	movs	r1, #44	; 0x2c
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	3361      	adds	r3, #97	; 0x61
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fd42 	bl	8001fe4 <USB_HC_Halt>
}
 8001560:	e28c      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	015a      	lsls	r2, r3, #5
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4413      	add	r3, r2
 800156a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d12c      	bne.n	80015d2 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	212c      	movs	r1, #44	; 0x2c
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	3361      	adds	r3, #97	; 0x61
 8001586:	2204      	movs	r2, #4
 8001588:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	212c      	movs	r1, #44	; 0x2c
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	333d      	adds	r3, #61	; 0x3d
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	212c      	movs	r1, #44	; 0x2c
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	335c      	adds	r3, #92	; 0x5c
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd13 	bl	8001fe4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ca:	461a      	mov	r2, r3
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	6093      	str	r3, [r2, #8]
}
 80015d0:	e254      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d11a      	bne.n	800161e <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f4:	461a      	mov	r2, r3
 80015f6:	2308      	movs	r3, #8
 80015f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	212c      	movs	r1, #44	; 0x2c
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	3361      	adds	r3, #97	; 0x61
 8001608:	2205      	movs	r2, #5
 800160a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fce4 	bl	8001fe4 <USB_HC_Halt>
}
 800161c:	e22e      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4413      	add	r3, r2
 8001626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b10      	cmp	r3, #16
 8001632:	d140      	bne.n	80016b6 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	335c      	adds	r3, #92	; 0x5c
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	212c      	movs	r1, #44	; 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	3361      	adds	r3, #97	; 0x61
 8001654:	2203      	movs	r2, #3
 8001656:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	333d      	adds	r3, #61	; 0x3d
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d112      	bne.n	8001692 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	333c      	adds	r3, #60	; 0x3c
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	333d      	adds	r3, #61	; 0x3d
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fca1 	bl	8001fe4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ae:	461a      	mov	r2, r3
 80016b0:	2310      	movs	r3, #16
 80016b2:	6093      	str	r3, [r2, #8]
}
 80016b4:	e1e2      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c8:	2b80      	cmp	r3, #128	; 0x80
 80016ca:	d164      	bne.n	8001796 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d111      	bne.n	80016f8 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	3361      	adds	r3, #97	; 0x61
 80016e2:	2206      	movs	r2, #6
 80016e4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fc77 	bl	8001fe4 <USB_HC_Halt>
 80016f6:	e044      	b.n	8001782 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	335c      	adds	r3, #92	; 0x5c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	202c      	movs	r0, #44	; 0x2c
 8001710:	fb00 f303 	mul.w	r3, r0, r3
 8001714:	440b      	add	r3, r1
 8001716:	335c      	adds	r3, #92	; 0x5c
 8001718:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	335c      	adds	r3, #92	; 0x5c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d920      	bls.n	8001770 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	335c      	adds	r3, #92	; 0x5c
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	212c      	movs	r1, #44	; 0x2c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3360      	adds	r3, #96	; 0x60
 800174e:	2204      	movs	r2, #4
 8001750:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	b2d9      	uxtb	r1, r3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	202c      	movs	r0, #44	; 0x2c
 800175c:	fb00 f303 	mul.w	r3, r0, r3
 8001760:	4413      	add	r3, r2
 8001762:	3360      	adds	r3, #96	; 0x60
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fe92 	bl	8002492 <HAL_HCD_HC_NotifyURBChange_Callback>
 800176e:	e008      	b.n	8001782 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	3360      	adds	r3, #96	; 0x60
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4413      	add	r3, r2
 800178a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178e:	461a      	mov	r2, r3
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	6093      	str	r3, [r2, #8]
}
 8001794:	e172      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4413      	add	r3, r2
 800179e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d11b      	bne.n	80017e6 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3361      	adds	r3, #97	; 0x61
 80017bc:	2208      	movs	r2, #8
 80017be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fc0a 	bl	8001fe4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017dc:	461a      	mov	r2, r3
 80017de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	e14a      	b.n	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	f040 813f 	bne.w	8001a7c <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	3361      	adds	r3, #97	; 0x61
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d17d      	bne.n	800190e <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	212c      	movs	r1, #44	; 0x2c
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3360      	adds	r3, #96	; 0x60
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	333f      	adds	r3, #63	; 0x3f
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d00a      	beq.n	800184e <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	333f      	adds	r3, #63	; 0x3f
 8001846:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001848:	2b03      	cmp	r3, #3
 800184a:	f040 8100 	bne.w	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d113      	bne.n	800187e <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3355      	adds	r3, #85	; 0x55
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2d8      	uxtb	r0, r3
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3355      	adds	r3, #85	; 0x55
 800187a:	4602      	mov	r2, r0
 800187c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	f040 80e3 	bne.w	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	334c      	adds	r3, #76	; 0x4c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80d8 	beq.w	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	334c      	adds	r3, #76	; 0x4c
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	202c      	movs	r0, #44	; 0x2c
 80018b4:	fb00 f202 	mul.w	r2, r0, r2
 80018b8:	440a      	add	r2, r1
 80018ba:	3240      	adds	r2, #64	; 0x40
 80018bc:	8812      	ldrh	r2, [r2, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	3b01      	subs	r3, #1
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	202c      	movs	r0, #44	; 0x2c
 80018c8:	fb00 f202 	mul.w	r2, r0, r2
 80018cc:	440a      	add	r2, r1
 80018ce:	3240      	adds	r2, #64	; 0x40
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80b5 	beq.w	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3355      	adds	r3, #85	; 0x55
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	f083 0301 	eor.w	r3, r3, #1
 80018f8:	b2d8      	uxtb	r0, r3
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3355      	adds	r3, #85	; 0x55
 8001908:	4602      	mov	r2, r0
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e09f      	b.n	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3361      	adds	r3, #97	; 0x61
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d109      	bne.n	8001936 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3360      	adds	r3, #96	; 0x60
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e08b      	b.n	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3361      	adds	r3, #97	; 0x61
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d109      	bne.n	800195e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3360      	adds	r3, #96	; 0x60
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e077      	b.n	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3361      	adds	r3, #97	; 0x61
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d109      	bne.n	8001986 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3360      	adds	r3, #96	; 0x60
 8001980:	2205      	movs	r2, #5
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e063      	b.n	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	3361      	adds	r3, #97	; 0x61
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b06      	cmp	r3, #6
 8001998:	d009      	beq.n	80019ae <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3361      	adds	r3, #97	; 0x61
 80019a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d14f      	bne.n	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	335c      	adds	r3, #92	; 0x5c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	202c      	movs	r0, #44	; 0x2c
 80019c6:	fb00 f303 	mul.w	r3, r0, r3
 80019ca:	440b      	add	r3, r1
 80019cc:	335c      	adds	r3, #92	; 0x5c
 80019ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	335c      	adds	r3, #92	; 0x5c
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d912      	bls.n	8001a0a <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	335c      	adds	r3, #92	; 0x5c
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3360      	adds	r3, #96	; 0x60
 8001a04:	2204      	movs	r2, #4
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e021      	b.n	8001a4e <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	212c      	movs	r1, #44	; 0x2c
 8001a10:	fb01 f303 	mul.w	r3, r1, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	3360      	adds	r3, #96	; 0x60
 8001a18:	2202      	movs	r2, #2
 8001a1a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a32:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a3a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	461a      	mov	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b2d9      	uxtb	r1, r3
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	202c      	movs	r0, #44	; 0x2c
 8001a6a:	fb00 f303 	mul.w	r3, r0, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3360      	adds	r3, #96	; 0x60
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fd0b 	bl	8002492 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	0c5b      	lsrs	r3, r3, #17
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d004      	beq.n	8001aca <HCD_RXQLVL_IRQHandler+0x46>
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	f000 80a9 	beq.w	8001c1a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001ac8:	e0aa      	b.n	8001c20 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HCD_RXQLVL_IRQHandler+0x19a>
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3344      	adds	r3, #68	; 0x44
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 809b 	beq.w	8001c1e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3350      	adds	r3, #80	; 0x50
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	441a      	add	r2, r3
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	202c      	movs	r0, #44	; 0x2c
 8001b02:	fb00 f303 	mul.w	r3, r0, r3
 8001b06:	440b      	add	r3, r1
 8001b08:	334c      	adds	r3, #76	; 0x4c
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d87a      	bhi.n	8001c06 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3344      	adds	r3, #68	; 0x44
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	b292      	uxth	r2, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f000 f997 	bl	8001e5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3344      	adds	r3, #68	; 0x44
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	441a      	add	r2, r3
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	202c      	movs	r0, #44	; 0x2c
 8001b48:	fb00 f303 	mul.w	r3, r0, r3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3344      	adds	r3, #68	; 0x44
 8001b50:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3350      	adds	r3, #80	; 0x50
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	441a      	add	r2, r3
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	202c      	movs	r0, #44	; 0x2c
 8001b6c:	fb00 f303 	mul.w	r3, r0, r3
 8001b70:	440b      	add	r3, r1
 8001b72:	3350      	adds	r3, #80	; 0x50
 8001b74:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	0cdb      	lsrs	r3, r3, #19
 8001b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3340      	adds	r3, #64	; 0x40
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d13c      	bne.n	8001c1e <HCD_RXQLVL_IRQHandler+0x19a>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d039      	beq.n	8001c1e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bc0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bc8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3354      	adds	r3, #84	; 0x54
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	f083 0301 	eor.w	r3, r3, #1
 8001bf0:	b2d8      	uxtb	r0, r3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3354      	adds	r3, #84	; 0x54
 8001c00:	4602      	mov	r2, r0
 8001c02:	701a      	strb	r2, [r3, #0]
      break;
 8001c04:	e00b      	b.n	8001c1e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3360      	adds	r3, #96	; 0x60
 8001c14:	2204      	movs	r2, #4
 8001c16:	701a      	strb	r2, [r3, #0]
      break;
 8001c18:	e001      	b.n	8001c1e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001c1e:	bf00      	nop
  }
}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c54:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d10b      	bne.n	8001c78 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fbf5 	bl	800245a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d132      	bne.n	8001ce8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d126      	bne.n	8001ce2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d113      	bne.n	8001cc4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001ca2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ca6:	d106      	bne.n	8001cb6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f94d 	bl	8001f4e <USB_InitFSLSPClkSel>
 8001cb4:	e011      	b.n	8001cda <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 f946 	bl	8001f4e <USB_InitFSLSPClkSel>
 8001cc2:	e00a      	b.n	8001cda <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001cd8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fbe7 	bl	80024ae <HAL_HCD_PortEnabled_Callback>
 8001ce0:	e002      	b.n	8001ce8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fbf1 	bl	80024ca <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d103      	bne.n	8001cfa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6013      	str	r3, [r2, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0b5b      	lsrs	r3, r3, #13
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	080025d4 	.word	0x080025d4

08001d50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f023 0201 	bic.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <USB_FlushTxFifo+0x64>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e01b      	b.n	8001dec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	daf2      	bge.n	8001da2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	019b      	lsls	r3, r3, #6
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <USB_FlushTxFifo+0x64>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e006      	b.n	8001dec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d0f0      	beq.n	8001dcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	00030d40 	.word	0x00030d40

08001dfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <USB_FlushRxFifo+0x5c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e018      	b.n	8001e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	daf2      	bge.n	8001e08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <USB_FlushRxFifo+0x5c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e006      	b.n	8001e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d0f0      	beq.n	8001e2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	00030d40 	.word	0x00030d40

08001e5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
 8001e86:	e014      	b.n	8001eb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	601a      	str	r2, [r3, #0]
    pDest++;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3301      	adds	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	6a3a      	ldr	r2, [r7, #32]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3e6      	bcc.n	8001e88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001eba:	8bfb      	ldrh	r3, [r7, #30]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01e      	beq.n	8001efe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	701a      	strb	r2, [r3, #0]
      i++;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
      pDest++;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3301      	adds	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001ef8:	8bfb      	ldrh	r3, [r7, #30]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ea      	bne.n	8001ed4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	372c      	adds	r7, #44	; 0x2c
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001f24:	68fb      	ldr	r3, [r7, #12]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6c:	f023 0303 	bic.w	r3, r3, #3
 8001f70:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f96:	461a      	mov	r2, r3
 8001f98:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001f9c:	6053      	str	r3, [r2, #4]
 8001f9e:	e009      	b.n	8001fb4 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d106      	bne.n	8001fb4 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fac:	461a      	mov	r2, r3
 8001fae:	f241 7370 	movw	r3, #6000	; 0x1770
 8001fb2:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	b29b      	uxth	r3, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0fdb      	lsrs	r3, r3, #31
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d104      	bne.n	800203e <USB_HC_Halt+0x5a>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e0c8      	b.n	80021d0 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <USB_HC_Halt+0x66>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d163      	bne.n	8002112 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	0151      	lsls	r1, r2, #5
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	440a      	add	r2, r1
 8002060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002068:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 80ab 	bne.w	80021ce <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d133      	bne.n	80020ec <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	0151      	lsls	r1, r2, #5
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	440a      	add	r2, r1
 800209a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800209e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020c2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d0:	d81d      	bhi.n	800210e <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e8:	d0ec      	beq.n	80020c4 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80020ea:	e070      	b.n	80021ce <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	0151      	lsls	r1, r2, #5
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	440a      	add	r2, r1
 8002102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800210a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800210c:	e05f      	b.n	80021ce <USB_HC_Halt+0x1ea>
            break;
 800210e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002110:	e05d      	b.n	80021ce <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	0151      	lsls	r1, r2, #5
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	440a      	add	r2, r1
 8002128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800212c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002130:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d133      	bne.n	80021aa <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	0151      	lsls	r1, r2, #5
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	440a      	add	r2, r1
 8002158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002160:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	0151      	lsls	r1, r2, #5
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	440a      	add	r2, r1
 8002178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800217c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002180:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218e:	d81d      	bhi.n	80021cc <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021a6:	d0ec      	beq.n	8002182 <USB_HC_Halt+0x19e>
 80021a8:	e011      	b.n	80021ce <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	0151      	lsls	r1, r2, #5
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	440a      	add	r2, r1
 80021c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e000      	b.n	80021ce <USB_HC_Halt+0x1ea>
          break;
 80021cc:	bf00      	nop
    }
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3724      	adds	r7, #36	; 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fdbe 	bl	8001d72 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80021f6:	2110      	movs	r1, #16
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fdcb 	bl	8001d94 <USB_FlushTxFifo>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fdf7 	bl	8001dfc <USB_FlushRxFifo>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	e01f      	b.n	800225e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002234:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800223c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002244:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3301      	adds	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d9dc      	bls.n	800221e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e034      	b.n	80022d4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002280:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002288:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002290:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	461a      	mov	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b0:	d80c      	bhi.n	80022cc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c8:	d0ec      	beq.n	80022a4 <USB_StopHost+0xc8>
 80022ca:	e000      	b.n	80022ce <USB_StopHost+0xf2>
        break;
 80022cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	d9c7      	bls.n	800226a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e0:	461a      	mov	r2, r3
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f04f 32ff 	mov.w	r2, #4294967295
 80022ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fd2d 	bl	8001d50 <USB_EnableGlobalInt>

  return ret;
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f804 	bl	8002324 <USBH_HandleSof>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b0b      	cmp	r3, #11
 8002334:	d10a      	bne.n	800234c <USBH_HandleSof+0x28>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002364:	bf00      	nop
}
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002380:	bf00      	nop
}
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f883 	bl	80024e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f80b 	bl	8002402 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	795b      	ldrb	r3, [r3, #5]
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f805 	bl	8002402 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80d      	bhi.n	8002430 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	33e0      	adds	r3, #224	; 0xe0
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	33e0      	adds	r3, #224	; 0xe0
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff57 	bl	8002300 <USBH_LL_IncTimer>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff8f 	bl	800238c <USBH_LL_Connect>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff98 	bl	80023ba <USBH_LL_Disconnect>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
 800249e:	4613      	mov	r3, r2
 80024a0:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff49 	bl	8002354 <USBH_LL_PortEnabled>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff49 	bl	8002370 <USBH_LL_PortDisabled>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fbe6 	bl	8000cce <HAL_HCD_Stop>
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f807 	bl	800251c <USBH_Get_USB_Status>
 800250e:	4603      	mov	r3, r0
 8002510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002512:	7bbb      	ldrb	r3, [r7, #14]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d817      	bhi.n	8002560 <USBH_Get_USB_Status+0x44>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <USBH_Get_USB_Status+0x1c>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800254f 	.word	0x0800254f
 8002540:	08002555 	.word	0x08002555
 8002544:	0800255b 	.word	0x0800255b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
    break;
 800254c:	e00b      	b.n	8002566 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800254e:	2302      	movs	r3, #2
 8002550:	73fb      	strb	r3, [r7, #15]
    break;
 8002552:	e008      	b.n	8002566 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
    break;
 8002558:	e005      	b.n	8002566 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800255a:	2302      	movs	r3, #2
 800255c:	73fb      	strb	r3, [r7, #15]
    break;
 800255e:	e002      	b.n	8002566 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002560:	2302      	movs	r3, #2
 8002562:	73fb      	strb	r3, [r7, #15]
    break;
 8002564:	bf00      	nop
  }
  return usb_status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <__libc_init_array>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	4d0d      	ldr	r5, [pc, #52]	; (80025ac <__libc_init_array+0x38>)
 8002578:	4c0d      	ldr	r4, [pc, #52]	; (80025b0 <__libc_init_array+0x3c>)
 800257a:	1b64      	subs	r4, r4, r5
 800257c:	10a4      	asrs	r4, r4, #2
 800257e:	2600      	movs	r6, #0
 8002580:	42a6      	cmp	r6, r4
 8002582:	d109      	bne.n	8002598 <__libc_init_array+0x24>
 8002584:	4d0b      	ldr	r5, [pc, #44]	; (80025b4 <__libc_init_array+0x40>)
 8002586:	4c0c      	ldr	r4, [pc, #48]	; (80025b8 <__libc_init_array+0x44>)
 8002588:	f000 f818 	bl	80025bc <_init>
 800258c:	1b64      	subs	r4, r4, r5
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	2600      	movs	r6, #0
 8002592:	42a6      	cmp	r6, r4
 8002594:	d105      	bne.n	80025a2 <__libc_init_array+0x2e>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	f855 3b04 	ldr.w	r3, [r5], #4
 800259c:	4798      	blx	r3
 800259e:	3601      	adds	r6, #1
 80025a0:	e7ee      	b.n	8002580 <__libc_init_array+0xc>
 80025a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a6:	4798      	blx	r3
 80025a8:	3601      	adds	r6, #1
 80025aa:	e7f2      	b.n	8002592 <__libc_init_array+0x1e>
 80025ac:	080025dc 	.word	0x080025dc
 80025b0:	080025dc 	.word	0x080025dc
 80025b4:	080025dc 	.word	0x080025dc
 80025b8:	080025e0 	.word	0x080025e0

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
